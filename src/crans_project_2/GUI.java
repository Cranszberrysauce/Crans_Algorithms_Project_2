package crans_project_2;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;

/******************************************************
***  GUI
***  Nick Crans
******************************************************
*** This is the class that creates the components for
*** the gui and adds all the funtionality to the window
******************************************************
*** 02/22/2019: Class created
*** 02/22/2019: Created components 
*** 02/22/2019: Created event handler for createAutomataBtn
*** 02/22/2019: Created event handler for enterRulesBtn
*** 02/22/2019: Created event handler for testStringBtn
*** 02/27/2019: Created event handler for clear buttons
*** 02/27/2019: Created event handler for newAutomataBtn 
***             and newRulesBtn
******************************************************/
public class GUI extends javax.swing.JFrame 
{
    FiniteAutomata machine;
    
    public GUI() 
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        displayOutput = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        numStatesTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        alphabetTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        acceptStTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        createAutomataBtn = new javax.swing.JButton();
        clearAutomataFieldsBtn = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        newAutomataBtn = new javax.swing.JButton();
        newRulesBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        currentStateTxt = new javax.swing.JTextField();
        nextCharacterTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        nextStateTxt = new javax.swing.JTextField();
        enterRuleBtn = new javax.swing.JButton();
        clearRulesBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        testWordTxt = new javax.swing.JTextField();
        enterTestWordBtn = new javax.swing.JButton();
        clearTestWordBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Crans Project 2");
        setBackground(new java.awt.Color(102, 204, 255));

        displayOutput.setEditable(false);
        displayOutput.setColumns(20);
        displayOutput.setRows(5);
        displayOutput.setText("Enter number of states in machine and an alphabet of a-z.\nInitial state for every machine is State 1. \nMust have transition for every character at every state.");
        displayOutput.setToolTipText("");
        jScrollPane1.setViewportView(displayOutput);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setText("Output");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Automata Setup", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N
        jPanel1.setName("Automata Setup"); // NOI18N

        jLabel1.setText("Enter number of states:");

        alphabetTxt.setText("No commas, no spaces");
        alphabetTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                alphabetTxtMouseClicked(evt);
            }
        });
        alphabetTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alphabetTxtActionPerformed(evt);
            }
        });

        jLabel2.setText("Enter alphabet:");

        acceptStTxt.setText("Seperate states with commas");
        acceptStTxt.setToolTipText("");
        acceptStTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                acceptStTxtMouseClicked(evt);
            }
        });
        acceptStTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptStTxtActionPerformed(evt);
            }
        });

        jLabel5.setText("Enter accepting state:");

        createAutomataBtn.setText("Create Automata");
        createAutomataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAutomataBtnActionPerformed(evt);
            }
        });

        clearAutomataFieldsBtn.setText("Clear");
        clearAutomataFieldsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAutomataFieldsBtnActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "New Automata", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        newAutomataBtn.setText("New Automata");
        newAutomataBtn.setToolTipText("");
        newAutomataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAutomataBtnActionPerformed(evt);
            }
        });

        newRulesBtn.setText("New Rules");
        newRulesBtn.setMaximumSize(new java.awt.Dimension(63, 25));
        newRulesBtn.setMinimumSize(new java.awt.Dimension(63, 25));
        newRulesBtn.setPreferredSize(new java.awt.Dimension(63, 25));
        newRulesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRulesBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(newAutomataBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                    .addComponent(newRulesBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newAutomataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(newRulesBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(acceptStTxt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(createAutomataBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearAutomataFieldsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(alphabetTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(numStatesTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(7, 7, 7)
                        .addComponent(numStatesTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(alphabetTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(acceptStTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createAutomataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearAutomataFieldsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Automata Rules", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("----->");

        jLabel8.setText("Current State:");

        jLabel9.setText("Next Character:");

        jLabel10.setText("Transition to:");

        enterRuleBtn.setText("Enter Rule");
        enterRuleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterRuleBtnActionPerformed(evt);
            }
        });

        clearRulesBtn.setText("Clear");
        clearRulesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearRulesBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(enterRuleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clearRulesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(currentStateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(nextCharacterTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nextStateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))))
                .addGap(18, 18, 18))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(currentStateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nextCharacterTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(nextStateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(enterRuleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearRulesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Test Word", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        enterTestWordBtn.setText("Enter Test Word");
        enterTestWordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterTestWordBtnActionPerformed(evt);
            }
        });

        clearTestWordBtn.setText("Clear");
        clearTestWordBtn.setToolTipText("");
        clearTestWordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTestWordBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(enterTestWordBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clearTestWordBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(testWordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(testWordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(enterTestWordBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(clearTestWordBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(327, 327, 327))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(21, 21, 21)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /******************************************************
    ‘***  createAutomataBtnActionPerformed
    ‘***  Nick Crans
    ‘******************************************************
    ‘*** Allows the user to enter rules and alphabet for machine
    ‘******************************************************
    ‘*** 09/27/2019
    ‘******************************************************/
    private void createAutomataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAutomataBtnActionPerformed
        String strNumStates = numStatesTxt.getText();
        String alphabet = alphabetTxt.getText();
        String strAcceptSts = acceptStTxt.getText();
        List<String> acceptingStates;
        List<Integer> intAcceptStates = new ArrayList<>();
        int[][] transTable;
        int testState, testAcceptState;
        
        try
        {
            alphabet = alphabet.toLowerCase();
            
            if(strNumStates.isEmpty())
            {
                BadStateInputException emptyInput = new BadStateInputException("The number "
                        + "of states must be an integer of 1 or higher");
                throw emptyInput;
            }
            else
            {
                if(strAcceptSts.isEmpty())
                {
                        BadStateInputException emptyInput = new BadStateInputException("The accepting "
                        + "states must be an integer of 1 or higher");
                        throw emptyInput;
                }
                else
                {
                    testState = Integer.parseInt(strNumStates);
                    acceptingStates = Arrays.asList(strAcceptSts.split(","));
                    if(testState < 1)
                    {
                        BadStateInputException badStateInput = new BadStateInputException("The "
                            + "number of states must be an integer of 1 or higher");
                        throw badStateInput;
                    }
                    for(int currentChar = 0; currentChar < acceptingStates.size(); currentChar++)
                    {
                        testAcceptState = Integer.parseInt(acceptingStates.get(currentChar));
                        
                        if(testAcceptState < 1)
                        {
                            BadStateInputException badStateInput = new BadStateInputException("The "
                                + "accepting states must be an integer of 1 or higher");
                            throw badStateInput;
                        }
                        if(testAcceptState > testState)
                        {
                            BadStateInputException badStateInput = new BadStateInputException("The "
                                + "accepting states cannot be greater than the number of states.");
                            throw badStateInput;
                        }
                        
                        intAcceptStates.add(testAcceptState);
                    }    
                    if(!alphabet.matches("[a-zA-Z]+"))
                    {
                        BadAlphabetException badAlphabetInput = new
                            BadAlphabetException("Alphabet must be letters.");
                        throw badAlphabetInput;
                    }

                    transTable = new int[testState + 1][alphabet.length() + 1];
                    machine = new FiniteAutomata(testState, alphabet, transTable, 
                                                        1, intAcceptStates);
                    displayOutput.append(machine.toString());
                }
            }
        }
        catch(BadAlphabetException badAlphabetInput)
        {
            JOptionPane.showMessageDialog(null, badAlphabetInput.getMessage(), "Aaphabet Input Error", 2);
        }
        catch(BadStateInputException | NumberFormatException badStateInput)
        {
            JOptionPane.showMessageDialog(null, badStateInput.getMessage(), "State Input Error", 2);
        }
    }//GEN-LAST:event_createAutomataBtnActionPerformed

    /******************************************************
    ‘***  clearAutomataFieldsBtnActionPerformed
    ‘***  Nick Crans
    ‘******************************************************
    ‘*** Clears the fields and stuff
    ‘******************************************************
    ‘*** 09/27/2019
    ‘******************************************************/
    private void clearAutomataFieldsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAutomataFieldsBtnActionPerformed
        numStatesTxt.setText("");
        alphabetTxt.setText("");
        acceptStTxt.setText("");
    }//GEN-LAST:event_clearAutomataFieldsBtnActionPerformed

    /******************************************************
    ‘***  enterRuleBtnActionPerformed
    ‘***  Nick Crans
    ‘******************************************************
    ‘*** Only accepts states as integers and characters as characters
    ‘******************************************************
    ‘*** 09/22/2019
    ‘******************************************************/
    private void enterRuleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterRuleBtnActionPerformed
        int currentState, nextState, numberOfStates;
        String nextChar;

        try
        {
            if(machine == null)
            {
                EmptyMachineException emptyMachine = new EmptyMachineException("Create "
                        + "a machine before adding rules for the machine.");
                throw emptyMachine;
            }
            
            currentState = Integer.parseInt(currentStateTxt.getText());
            nextState = Integer.parseInt(nextStateTxt.getText());
            nextChar = nextCharacterTxt.getText();
            numberOfStates = machine.getNumberOfStates();
            
            if(!machine.inAlphabet(nextChar.charAt(0)))
            {
                BadAlphabetException badAlphabetInput = new
                    BadAlphabetException("Next character entered not in alphabet.");
                throw badAlphabetInput;
            }
            if(currentState > numberOfStates || currentState < 0)
            {
                BadStateInputException badStateInput = new 
                    BadStateInputException("Current state cannot be larger than number of"
                            + " states or less than 0.");
                throw badStateInput;
            }
            if(nextState > numberOfStates || nextState < 0)
            {
                BadStateInputException badStateInput = new 
                    BadStateInputException("Transition state cannot be larger than number of"
                            + " states or less than 0.");
                throw badStateInput;
            }
            if(nextChar.length() > 1)
            {
                BadAlphabetException badAlphabetInput = new
                    BadAlphabetException("Alphabet is single characters.");
                throw badAlphabetInput;
            }
            if(!nextChar.matches("[a-zA-Z]+"))
            {
                BadAlphabetException badAlphabetInput = new
                    BadAlphabetException("Characters in alphabet are letters a-z.");
                throw badAlphabetInput;
            }
            
            machine.fillTransTable(currentState, nextChar, nextState);
        }
        catch(EmptyMachineException emptyMachine)
        {
            JOptionPane.showMessageDialog(null, emptyMachine.getMessage(), "Empty Machine Error", 2);
        }
        catch(BadAlphabetException badAlphabetInput)
        {
            JOptionPane.showMessageDialog(null, badAlphabetInput.getMessage(), "Alphabet Input Error", 2);
        }
        catch(BadStateInputException | NumberFormatException badStateInput)
        {
            JOptionPane.showMessageDialog(null, badStateInput.getMessage(), "State Input Error", 2);
        }
    }//GEN-LAST:event_enterRuleBtnActionPerformed

    /******************************************************
    ‘***  enterTestWordBtnActionPerformed
    ‘***  Nick Crans
    ‘******************************************************
    ‘*** Accepts any string.
    ‘******************************************************
    ‘*** 09/22/2019
    ‘******************************************************/
    private void enterTestWordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterTestWordBtnActionPerformed
        try
        {
            if(machine == null)
            {
                EmptyMachineException emptyMachine = new EmptyMachineException("Create "
                        + "a machine before testing word.");
                throw emptyMachine;
            }
            if(machine.tableIsEmpty())
            {
                EmptyRulesException emptyRules = new EmptyRulesException("Transition "
                        + " table is not complete.");
                throw emptyRules;
            }
            String displayTransitions;
            String testWord = testWordTxt.getText();
            boolean wordAccepted;

            machine.resetState();

            wordAccepted = machine.canStop(testWord);
            
            machine.resetState();
            
            for(int currChar = 0; currChar < testWord.length(); currChar++)
            {
                displayTransitions = machine.showTransitions(testWord.charAt(currChar));
                displayOutput.append(displayTransitions);
            }

            if(wordAccepted)
                displayOutput.append("Machine accepts word.\n");
            else
                displayOutput.append("Machine does not accept word.\n");
        }
        catch(EmptyMachineException emptyMachine)
        {
            JOptionPane.showMessageDialog(null, emptyMachine.getMessage(), "Empty Machine Error", 2);
        }
        catch(EmptyRulesException emptyRules)
        {
            JOptionPane.showMessageDialog(null, emptyRules.getMessage(), "Transition Rules Error", 2);
        }
    }//GEN-LAST:event_enterTestWordBtnActionPerformed

    /******************************************************
    ‘***  alphabetTxtActionPerformed
    ‘***  Nick Crans
    ‘******************************************************
    ‘*** Clears fields and stuff.
    ‘******************************************************
    ‘*** 09/22/2019
    ‘******************************************************/
    private void alphabetTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alphabetTxtActionPerformed
        alphabetTxt.setText("");
    }//GEN-LAST:event_alphabetTxtActionPerformed

    /******************************************************
    ‘***  acceptStTxtActionPerformed
    ‘***  Nick Crans
    ‘******************************************************
    ‘*** clears accept state when clicked
    ‘******************************************************
    ‘*** 09/22/2019
    ‘******************************************************/
    private void acceptStTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptStTxtActionPerformed
        acceptStTxt.setText("");
    }//GEN-LAST:event_acceptStTxtActionPerformed

    /******************************************************
    ‘***  alphabetTxtMouseClicked
    ‘***  Nick Crans
    ‘******************************************************
    ‘*** clears alphabet text field
    ‘******************************************************
    ‘*** 09/22/2019
    ‘******************************************************/
    private void alphabetTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_alphabetTxtMouseClicked
        alphabetTxt.setText("");
    }//GEN-LAST:event_alphabetTxtMouseClicked

    /******************************************************
    ‘***  acceptStTxtMouseClicked
    ‘***  Nick Crans
    ‘******************************************************
    ‘*** clears max states fields
    ‘******************************************************
    ‘*** 09/22/2019
    ‘******************************************************/
    private void acceptStTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_acceptStTxtMouseClicked
        acceptStTxt.setText("");
    }//GEN-LAST:event_acceptStTxtMouseClicked

    /******************************************************
    ‘***  clearRulesBtnActionPerformed
    ‘***  Nick Crans
    ‘******************************************************
    ‘*** Clears fields and stuff.
    ‘******************************************************
    ‘*** 09/27/2019
    ‘******************************************************/
    private void clearRulesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearRulesBtnActionPerformed
        currentStateTxt.setText("");
        nextCharacterTxt.setText("");
        nextStateTxt.setText("");
    }//GEN-LAST:event_clearRulesBtnActionPerformed

    /******************************************************
    ‘***  clearTestWordBtnActionPerformed
    ‘***  Nick Crans
    ‘******************************************************
    ‘*** Clears fields and stuff.
    ‘******************************************************
    ‘*** 09/27/2019
    ‘******************************************************/
    private void clearTestWordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTestWordBtnActionPerformed
       testWordTxt.setText("");
    }//GEN-LAST:event_clearTestWordBtnActionPerformed

    /******************************************************
    ‘***  newAutomataBtnActionPerformed
    ‘***  Nick Crans
    ‘******************************************************
    ‘*** If previous machine was not good, or want a new one;
    ‘*** why not make a new one?
    ‘******************************************************
    ‘*** 09/27/2019
    ‘******************************************************/
    private void newAutomataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAutomataBtnActionPerformed
        machine = null;
        displayOutput.append("New machine created.");
    }//GEN-LAST:event_newAutomataBtnActionPerformed

    /******************************************************
    ‘***  newRulesBtnActionPerformed
    ‘***  Nick Crans
    ‘******************************************************
    ‘*** If previous rules were not good, or want a new set;
    ‘*** why not make a new rule set?
    ‘******************************************************
    ‘*** 09/27/2019
    ‘******************************************************/
    private void newRulesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRulesBtnActionPerformed
        if(machine != null)
            machine.resetRules();
        
        displayOutput.append("Rule table cleared.");
    }//GEN-LAST:event_newRulesBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField acceptStTxt;
    private javax.swing.JTextField alphabetTxt;
    private javax.swing.JButton clearAutomataFieldsBtn;
    private javax.swing.JButton clearRulesBtn;
    private javax.swing.JButton clearTestWordBtn;
    private javax.swing.JButton createAutomataBtn;
    private javax.swing.JTextField currentStateTxt;
    private javax.swing.JTextArea displayOutput;
    private javax.swing.JButton enterRuleBtn;
    private javax.swing.JButton enterTestWordBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newAutomataBtn;
    private javax.swing.JButton newRulesBtn;
    private javax.swing.JTextField nextCharacterTxt;
    private javax.swing.JTextField nextStateTxt;
    private javax.swing.JTextField numStatesTxt;
    private javax.swing.JTextField testWordTxt;
    // End of variables declaration//GEN-END:variables
}
